from typing import Optional
from uuid import uuid4
from pydantic import BaseModel, Field


class QAPair(BaseModel):
    """
    The internal representation of a question-answer pair in the SQA system.
    It includes all the necessary information for the system to forward the question
    to the RAG pipeline and to then evaluate the responses.
    
    Furthermore, this is the object that is generated by the QA Generator of the SQA system.
    """
    uid: str = Field(default_factory=lambda: str(uuid4()))
    question: str = Field(...,
                          description="The question that needs to be answered")
    golden_answer: str = Field(
        ..., description="An example of an answer that is truthful to the question")

    source_ids: Optional[list[str]] = Field(
        default=None, description="The DOIs of the sources from which the question was generated")
    golden_doc_chunks: Optional[list[str]] = Field(
        default=None,
        description=("The texts that the retrieval process should "
                     "include if the question is related to a document"))
    golden_triples: Optional[list[str]] = Field(
        default=None,
        description=("The triples that the retrieval process should include if "
                     "the question is related to a knowledge graph"))
    is_generated_with: Optional[str] = Field(
        ..., description="What strategy was used to generate the question")
    topic_entity_id: Optional[str] = Field(
        default=None,
        description="The entry id in the knowledge graph from which the search is started from"
    )
    topic_entity_value: Optional[str] = Field(
        default=None, description="The value of the topic entity")
    hops: Optional[int] = Field(
        default=None,
        description="The amount of hops that the retrieval process takes to get to the answer"
    )
    based_on_template: Optional[str] = Field(
        default=None, description="The template that was used to generate the question")
