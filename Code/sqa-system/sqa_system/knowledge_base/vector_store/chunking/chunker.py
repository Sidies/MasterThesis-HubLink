from sqa_system.core.config.models.chunking_strategy_config import ChunkingStrategyConfig
from sqa_system.core.data.models.publication import Publication
from sqa_system.core.data.models.context import Context
from sqa_system.core.logging.logging import get_logger

from .chunking_strategy_factory import ChunkingStrategyFactory
from .base.chunking_strategy import ChunkingStrategy
logger = get_logger(__name__)


class Chunker:
    """
    A class that uses a chunking strategy to create chunks for a list of publications.

    Args:
        strategy (ChunkingStrategyConfig): The configuration for the chunking strategy
            to be used for chunking publications.
    """

    def __init__(self, strategy: ChunkingStrategyConfig) -> None:
        self.strategy: ChunkingStrategy = ChunkingStrategyFactory.create(
            strategy)
        self.chunks: list[Context] = []

    def set_strategy(self, strategy: ChunkingStrategy):
        """
        Sets the chunking strategy for the chunker.

        Args:
            strategy (ChunkingStrategy): The chunking strategy to be set.
        """
        self.strategy = strategy
        logger.info("Set chunking strategy to %s for chunker %s",
                    strategy.__class__.__name__, self.__class__.__name__)

    def run_chunking(self, publications: list[Publication]) -> bool:
        """
        Runs the chunking process for a list of publications.

        Args:
            publications (list[Publication]): A list of publications to create chunks for.

        Returns:
            bool: True if the chunking process was successful.

        Raises:
            ValueError: If the strategy is None or if the publications list is empty.
            Exception: If an error occurs during the chunking process.
        """
        if self.strategy is None:
            raise ValueError("Chunker strategy must not be None.")

        if publications is None or len(publications) == 0:
            raise ValueError("Publications list must not be None or empty.")

        try:
            for publication in publications:
                if publication is None:
                    logger.warning("Publication must not be None. Skipping.")
                    continue

                chunks = self.strategy.create_chunks(publication)
                if chunks is None:
                    logger.warning("Chunks must not be None. Skipping.")
                    continue

                self.chunks.extend(chunks)
        except Exception as e:
            logger.error("Failed to chunk publications: %s", e)
            raise

        return True

    def get_chunks(self) -> list[Context]:
        """
        Retrieves the chunks generated by the chunker.

        Returns:
            list[Chunk]: A list of chunks generated by the chunker.
        """
        return self.chunks
